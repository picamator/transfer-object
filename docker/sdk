#!/usr/bin/env bash

function show_usage() {
  echo "==================================="
  echo "    Transfer Object (Docker SDK)   "
  echo "==================================="
  echo "Usage: $0 [-x | -xp] <argument>"
  echo "Arguments:"
  echo "  -x                         Enable Xdebug with coverage and debug mode on start"
  echo "  -p                         Enable Xdebug with profiler mode on start"
  echo "  build                      Build Docker containers"
  echo "  start                      Start Docker containers"
  echo "  stop                       Stop Docker containers"
  echo "  cli                        Open container shell"
  echo "  composer <command>         Run composer command"
  echo "  phpstan                    Run PHPStan"
  echo "  phpunit                    Run PHPUnit"
  echo "  phpcs                      Run PHP CodeSniffer"
  echo "  phpcbf                     Run PHP Code Beautifier and Fixer"
  echo "  hook-install               Install CaptainHook"
  echo "  hook <command>             Run CaptainHook command"
  echo "  to-generate                Generate internal transfer objects"
  echo "  df-generate                Generate definition"
}

# vars
DOCKER_CONTAINER_NAME=transfer-object-php
PROJECT_ROOT="/home/transfer/transfer-object"
DOCKER_EXEC="docker exec -it ${DOCKER_CONTAINER_NAME}"

# options
XDEBUG_MODE=''

while getopts ":xp" opt; do
  case ${opt} in
    x )
      XDEBUG_MODE="debug,coverage"
      ;;
    p )
      XDEBUG_MODE="profile"
      ;;
    \? )
      show_usage
      exit 1
      ;;
  esac
done
shift $((OPTIND -1))

# arguments
case $1 in
  build)
    docker compose build
    ;;
  start)
    if [ "$XDEBUG_MODE" == "" ]; then
      docker compose up -d --remove-orphans
    else
      XDEBUG_MODE={$XDEBUG_MODE} docker compose up -d --remove-orphans
    fi
    ;;
  stop)
    docker compose stop
    ;;
  cli)
    $DOCKER_EXEC bash
    ;;
  composer)
    $DOCKER_EXEC composer $2
    ;;
  phpstan)
    $DOCKER_EXEC composer phpstan
    ;;
  phpunit)
    $DOCKER_EXEC composer phpunit
    ;;
  phpcs)
    $DOCKER_EXEC composer phpcs
    ;;
  phpcbf)
    $DOCKER_EXEC composer phpcbf
    ;;
  hook-install)
    $DOCKER_EXEC composer captainhook install --only-enabled --run-mode=docker --run-exec="docker exec -i $DOCKER_CONTAINER_NAME"
    ;;
  hook)
    $DOCKER_EXEC composer captainhook $2
    ;;
  to-generate)
     $DOCKER_EXEC composer transfer-generate -- -c ${PROJECT_ROOT}/config/generator.config.yml
    ;;
  df-generate)
     $DOCKER_EXEC composer definition-generate
    ;;
  *)
    show_usage
    exit 0
    ;;
esac
